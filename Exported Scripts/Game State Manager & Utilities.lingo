global gNumEnemies -- incremented by beginSprite of an enemy, decremented by its deathglobal gFirstBulletSprite -- so we know what to clean upglobal gLevelRunning -- whether the simulation is proceedingglobal gLevelWaiting -- waiting for a mouse click to start?global gPlayTime -- time the game has been running, in framesglobal gPlayer -- player behaviorglobal gSndChanCollideglobal gSndChanGlueglobal gSndChanBulletsglobal gSndChanGameStateglobal g_gsm_frameCnt -- used for checking frame rateglobal g_gsm_frameRateglobal g_gsm_statusData -- see enterFrame belowon startMovie  --put "startMovie"  gFirstBulletSprite = 100  gLevelRunning = FALSE  gSndChanCollide = 2  gSndChanGlue = 3  gSndChanBullets = 3  gSndChanGameState = 4    startTimer  g_gsm_frameCnt = 0  g_gsm_frameRate = ""endon deleteBullets  return  repeat with i = gFirstBulletSprite to the lastChannel    if sprite(i).member <> 0 then      puppetSprite i, FALSE      sprite(i).member = 0      sprite(i).scriptInstanceList = []    end if  end repeatendon enterFrame    -- frame rate counter  if FALSE then    g_gsm_frameCnt = g_gsm_frameCnt + 1    if the timer >= 60 then      g_gsm_frameRate = g_gsm_frameCnt      g_gsm_frameCnt = 0      startTimer    end if  end if    -- collect the data that goes in the status bar text  timeTenths = gPlayTime / (_movie.frameTempo / 10) -- NOTE: this only works if the frame rate is divisible by 10  if gPlayer = VOID then -- this calculation is here rather than after the condition so as not to duplicate the test of gPlayer.    myState = ""  else if gLevelWaiting then    myState = "Ready"  else if gPlayer.pAlive then    myState = ""  else    myState = "Dead"  end if    curData = [gLevelWaiting, myState, gNumEnemies, timeTenths, g_gsm_frameRate]    -- if the data is different, calc the string and display it.   -- We bother doing this because apparently setting the text of a text member is a slow operation.  if curData <> g_gsm_statusData then    g_gsm_statusData = curData        the floatPrecision = 1    myText = "Enemies: " & string(gNumEnemies) & TAB & string(g_gsm_frameRate) & TAB & myState & TAB & "Time: " & string(timeTenths / 10.0)    member("Enemies remaining").text  = myText  end if    -- If we're not actually running simulation and can afford the CPU time,  -- ensure the enemy count is exact.  if not gLevelRunning then    count = 0    repeat with i = 1 to the lastChannel do      repeat with j = 1 to sprite(i).scriptList.count do        -- XXX matching the name of the script is a horrible kludge. I would do better if I had the time.        if offset("Enemy", sprite(i).scriptList[j][1].name) > 0 then count = count + 1      end repeat    end repeat    setNumEnemies count  end if    end-- called by enemy behavioron arrivalOfAnEnemy enemyInstance  setNumEnemies gNumEnemies + 1endon removalOfAnEnemy enemyInstance  setNumEnemies gNumEnemies - 1endon deathOfAnEnemy enemyInstance  removalOfAnEnemy enemyInstance  if gNumEnemies <= 0 then    sound(gSndChanGameState).volume = 255    puppetSound gSndChanGameState, "Win-1"      end ifend-- called by above and by Reinitialize for Levelon setNumEnemies num  gNumEnemies = numend-- utility function - find a behavior instance by script nameon findInstance(aScript, behaviorName)  behavior = script behaviorName  repeat with i = 1 to aScript.scriptInstanceList.count do    inst = aScript.scriptInstanceList[i]    if inst.script = behavior then return inst  end repeat  return VOIDend-- subroutine: rotate a vector by an angleon rotvec(p, angle)  return vector(p.x * cos(angle) + p.y * sin(angle), p.x * -sin(angle) + p.y * cos(angle), p.z)endon atan2(y, x)  if x = 0 then    if y > 0 then      return PI/2     else      return -PI/2    end if  else    angle = atan(y/x)    if x < 0 then      angle = angle + PI    end if    return angle  end ifend